classdef filterandfit2 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                  matlab.ui.Figure
        UIAxes                    matlab.ui.control.UIAxes
        SelectDataButton          matlab.ui.control.Button
        PlotButton                matlab.ui.control.Button
        SetRise1                  matlab.ui.control.Button
        SetRise2                  matlab.ui.control.Button
        SetFall1                  matlab.ui.control.Button
        SetFall2                  matlab.ui.control.Button
        Filter                    matlab.ui.control.Button
        InterpolateandPlotButton  matlab.ui.control.Button
        FitButton                 matlab.ui.control.Button
        FindPointsButton          matlab.ui.control.Button
        CellNameEditFieldLabel    matlab.ui.control.Label
        CellNum                   matlab.ui.control.EditField
        PointsSliderLabel         matlab.ui.control.Label
        PointsSlider              matlab.ui.control.Slider
        Rise1Label                matlab.ui.control.Label
        rise1                     matlab.ui.control.TextArea
        Rise2Label                matlab.ui.control.Label
        rise2                     matlab.ui.control.TextArea
        Fall1Label                matlab.ui.control.Label
        fall1                     matlab.ui.control.TextArea
        Fall2Label                matlab.ui.control.Label
        fall2                     matlab.ui.control.TextArea
        E0TextAreaLabel           matlab.ui.control.Label
        E0                        matlab.ui.control.TextArea
        E1TextAreaLabel           matlab.ui.control.Label
        E1                        matlab.ui.control.TextArea
        Tau0TextAreaLabel         matlab.ui.control.Label
        Tau0                      matlab.ui.control.TextArea
        Tau1TextArea_2Label       matlab.ui.control.Label
        Tau1                      matlab.ui.control.TextArea
        ErrorTextAreaLabel        matlab.ui.control.Label
        Error                     matlab.ui.control.TextArea
        PercentageRecoveryTextAreaLabel  matlab.ui.control.Label
        PRB                       matlab.ui.control.TextArea
    end

    
    properties (Access = public)
        cellnum % cell loaded
        Struct %loaded data
        compliance % cell compliance
        time % cell time
        R1 % start of rising edge
        R2 % end of rising edge
        F1 %start of falling edge
        F2 %end of falling edge
        inter_butter %interpolated compliance
        inter_time %interpolated time
    end
    
    properties (Access = private)
        point % slider point
        pex % point exists
        ids %stored index of point
        butter_filter %filtered compliance
        unified_time %filtered time
        bfit %filtered compliance without falling edge
        tfit %filtered time without falling edge
    end
    
    methods (Access = private)
        
        function [jumps, falls, jt, ft] = interpolate(app, time, compliance)
            %find size of compliance matrix
            size_comp = size(compliance);
            
            %create matrix to store jump points
            jump = zeros(2,2);
            difference = 5e2;
            
            %find jump points based on where the compliance changes by
            %large amounts
            for i=2:size_comp(1,2)
                if compliance(i)-compliance(i-1) > difference
                    jump(1,1) = compliance(i-1);
                    jump(1,2) = compliance(i);
                    jump(2,1) = time(i-1);
                    jump(2,2) = time(i);
                    break
                end
            end
            
            % Create data points for rising edge
            jump_points = zeros(50,2);
            for i=1:50  
                jump_points(i,1) = jump(2,1) + i*(jump(2,2) - jump(2,1))/50;
                jump_points(i,2) = jump(1,1) + i*(jump(1,2) - jump(1,1))/50;
            end
            
            %create matrix to store falling points
            fall = zeros(2,2);
            
            %find falling points where compliance chages by large amounts
            for i=2:size_comp(1,2)
                if compliance(i-1)-compliance(i) > difference
                    fall(1,1) = compliance(i-1);
                    fall(1,2) = compliance(i);
                    fall(2,1) = time(i-1);
                    fall(2,2) = time(i);
                    break
                end
            end
            
            % Create data points for falling edge
            fall_points = zeros(50,2);
            for i=1:50
                fall_points(i,1) = fall(2,1) + i*(fall(2,2) - fall(2,1))/50;
                fall_points(i,2) = fall(1,1) - i*(fall(1,1) - fall(1,2))/50;
            end
            
            %reture the jump and fall points as well as edges created
            jumps = jump_points;
            falls = fall_points;
            jt = jump; 
            ft = fall;
            
        end
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: SelectDataButton
        function SelectDataButtonPushed(app, event)
            %load selected file
            [file,path] = uigetfile('*.mat');
            %only load if the file is a .mat ie matlab struct
            if isequal(file,0)
                disp('User selected cancel');
            else
                disp(['User selected ', fullfile(path,file)]);
            end
            
            %store the struct in the app
            app.Struct = load(fullfile(path,file));
        end

        % Button pushed function: PlotButton
        function PlotButtonPushed(app, event)
            %reset the plot
            hold(app.UIAxes, 'off');
            %store the cell name typed in the text box
            app.cellnum = app.CellNum;
            
            %use cell name to extract the cell and it's data from the
            %struct
            num = app.cellnum;
            struct = app.Struct;
            Cell = struct.StructSum.(num.Value);
            
            %set parameters from the metal bead
            radius = 2.25e-6;
            force = 6e-9;
            csa = 2*pi*radius;
            
            %store the displace data and time data
            displac = Cell.r_nm * 1e-9;
            app.time = Cell.time;
            
            %find the stress and strain from the data
            strain = displac/radius;
            stress = force/csa;
            
            %store the complaince
            app.compliance = strain/stress;
            
            %plot the raw data
            plot(app.UIAxes,app.time,app.compliance);
            app.PointsSlider.Limits = [min(app.time), max(app.time)];
        end

        % Value changing function: PointsSlider
        function PointsSliderValueChanging(app, event)
            %as slider moves track it
            changingValue = event.Value;
            
            %delete previous points *dosen't work*
            if exist('app.pex', 'var') == 1
                delete app.point;
                app.pex = 0;
            end
            
            %round to nearest .02 so it can plot
            t = floor(changingValue) + ceil( (changingValue-floor(changingValue))/0.02) * 0.02;
            
            %find the points of the slider in data
            [~, idx] = find(app.time == t);
            
            %plot the point based on slider
            hold(app.UIAxes, 'on');
            app.point = plot(app.UIAxes, app.time(idx), app.compliance(idx), 'r+');
            
            %there is a ploted point *relates to above and currently has
            %no effet*
            app.pex = 1;
        end

        % Value changed function: PointsSlider
        function PointsSliderValueChanged(app, event)
            %find value of selected point in slider
            value = app.PointsSlider.Value;
            
            %round value (done same as when ploting
            t = floor(value) + ceil( (value-floor(value))/0.02) * 0.02;
            
            %save the slider value idx so can be tracked later
            [~, app.ids] = find(app.time == t); 
        end

        % Button pushed function: SetRise1
        function SetRise1ButtonPushed(app, event)
            %find time and compliance of idx
            t = app.time(app.ids);
            c = app.compliance(app.ids);
            
            %start of rising pulse
            app.R1 = round((50*(round(t/0.02)/50))+1);

            %plot the saved riseing point
            plot(app.UIAxes, t, c, "ok");
            app.rise1.Value = {num2str(t), num2str(c)};
        end

        % Button pushed function: SetRise2
        function SetRise2ButtonPushed(app, event)
            %find time and compliance of idx
            t = app.time(app.ids);
            c = app.compliance(app.ids);
            
            %end of rising pulse
            app.R2 = round((50*(round(t/0.02)/50))+1);
            
            %plot the saved rising point
            plot(app.UIAxes, t, c, "ok");
            app.rise2.Value = {num2str(t), num2str(c)};
        end

        % Button pushed function: SetFall1
        function SetFall1ButtonPushed(app, event)
            %find time and compliance of idx
            t = app.time(app.ids);
            c = app.compliance(app.ids);
            
            %start of falling pulse
            app.F1 = round((50*(round(t/0.02)/50))+1);
            
            %plot the saved falling point
            plot(app.UIAxes, t, c, "ok");
            app.fall1.Value = {num2str(t), num2str(c)};
        end

        % Button pushed function: SetFall2
        function SetFall2ButtonPushed(app, event)
            %find time and compliance of idx
            t = app.time(app.ids);
            c = app.compliance(app.ids);
            
            %end of falling pulse
            app.F2 = round((50*(round(t/0.02)/50))+1);
            
            %plot the saved falling point
            plot(app.UIAxes, t, c, "ok");
            app.fall2.Value = {num2str(t), num2str(c)};
        end

        % Button pushed function: Filter
        function FilterButtonPushed(app, event)
            fs = 50; %sampling rate of 50 Hz
            fc = 0.75; %cut-off frequency of 0.75
            
            % Designs a low pass IIR (infinite impulse response) filter with the previously inputted frequency values
            d1 = designfilt('lowpassiir', 'FilterOrder', 2,...
                'HalfPowerFrequency', fc,'DesignMethod', 'butter',...
                'SampleRate',fs); %Low pass Butterworth Filter design

            %transpose data to 0
            transposed_pulse = app.compliance(app.R2:app.F1) - app.compliance(app.R2);
            transposed_disp = app.compliance(app.F2:app.F2+100) - mean(app.compliance(app.F2:app.F2+10));
            
            %filter in sections
            pre_buttered = filtfilt(d1, app.compliance(1:app.R1));
            peri_buttered = filtfilt(d1, transposed_pulse(1:end)) + app.compliance(app.R2);
            post_buttered = filtfilt(d1, transposed_disp(1:length(app.F2:app.F2+100))) + mean(app.compliance(app.F2:app.F2+10));
            
            %important time points in curve
            pre_pulse_times = 0:1/fs:1;
            rise_gap_time = (app.R2 - app.R1)/fs;            
            pulse_time_start = 1 + rise_gap_time;
            pulse_time_end = ((app.F1 - app.R2)/fs) + pulse_time_start;
            fall_gap_interval = (app.F2 - app.F1)/fs;
            post_pulse_time_start = pulse_time_end + fall_gap_interval;
            post_pulse_time_end = post_pulse_time_start + 2;
            pulse_times = pulse_time_start:1 / fs:pulse_time_end;
            post_pulse_times = post_pulse_time_start:1 / fs:post_pulse_time_end;
            
            %remove any remenant magnetism (assume constant compliance)
            b = mean(pre_buttered(end-50:end));
            remMag1 = b.*ones(1,length(pre_pulse_times));
            remMag2 = b.*ones(1,length(pulse_times));
            remMag3 = b.*ones(1,length(post_pulse_times));
          
            %output sectioned filtered compliances
            butterCompliance1 = pre_buttered(end-50:end) - remMag1';
            butterCompliance2 = peri_buttered - remMag2';
            butterCompliance3 = post_buttered - remMag3';
            
            %output sectioned times
            butterTime1 = pre_pulse_times;
            butterTime2 = pulse_times;
            butterTime3 = post_pulse_times;
           
            %save the unified filter pulse
            app.butter_filter = [butterCompliance1', butterCompliance2', butterCompliance3'];
            app.unified_time = [butterTime1, butterTime2, butterTime3];
            shiftedRawTime = app.time(app.R1-fs*1:app.F2+fs*2);
            shiftedRawCompliance = app.compliance(app.R1-fs*1:app.F2+fs*2) - mean(app.compliance(app.R1-fs*1:app.R1-fs*1+10));
            
            %plot the filtered data
            hold(app.UIAxes, 'off');
            t(1) = plot(app.UIAxes,shiftedRawTime-app.time(app.R1-fs*1),shiftedRawCompliance);
            hold(app.UIAxes, 'on');
            t(2) = plot(app.UIAxes,app.unified_time, app.butter_filter, 'g+-');
            
            %save for fitting
            app.bfit = [butterCompliance1', butterCompliance2'];
            app.tfit = [butterTime1, butterTime2];
            
            %recovery time
            rise_edge_start = [app.R1 app.compliance(app.R1)];
            rise_edge_end = [app.R2 app.compliance(app.R2)];
            fall_edge_start = [app.F1 app.compliance(app.F1)];
            fall_edge_end = [app.F2 app.compliance(app.F2)];
            recovery = (fall_edge_start(2) - rise_edge_start(2)) - (fall_edge_start(2) - fall_edge_end(2));
            percent_recovery = (recovery/ (fall_edge_start(2)-rise_edge_start(2)) )*100;
            
            %display recovery time 
            app.PRB.Value = {num2str(percent_recovery)};
        end

        % Button pushed function: InterpolateandPlotButton
        function InterpolateandPlotButtonPushed(app, event)
            %use saved filterd time and compliance matrices
            time_matrix = app.unified_time;
            compliance_matrix = app.butter_filter;

            %from the interpolate function find times of jump and points
            [jump, fall, t1, t2] = interpolate(app, time_matrix, compliance_matrix);
            
            %save jump and fall times
            jump_times = jump(:,1);
            fall_times = fall(:,1);
            %save times in order
            interpol_time = [time_matrix(1:t1(2,1)) jump_times' time_matrix(t1(2,2):t2(2,1)) fall_times' time_matrix(t2(2,2):end)];
            %save jummp and fall compliances
            jump_compliances = jump(:,2);
            fall_compliances = fall(:,2);
            %save compliances in same order as above
            interpol_compliance = [compliance_matrix(1:t1(2,1)) jump_compliances' compliance_matrix(t1(2,2):t2(2,1)) fall_compliances' compliance_matrix(t2(2,2):end)];
            
            %plot interpolated time and compliances
            hold(app.UIAxes, 'off');
            plot(app.UIAxes, interpol_time,interpol_compliance,'o'); 
            
            %save interpolated data
            app.inter_butter = interpol_compliance;
            app.inter_time = interpol_time;
            
            %display in matlab workspace
            assignin('base','time',app.inter_time);
            assignin('base','compliance',app.inter_butter);
        end

        % Button pushed function: FitButton
        function FitButtonPushed(app, event)
            %get x and y data for the fitting
            ydata = app.bfit; 
            xdata = app.tfit;
            x0 = [4000 0.002 0.2 0.002]; % initial guess for parameter values
            
            %initial matrices for the parameter
            lb = [0 0 0 0];
            ub = [Inf 100 100 100];
            
            mse = 1000000;
            
            % p = [E0 E1 tau0 tau1]
            fun = @(p,xdata) (1./(p(1))) + (1./(p(2))).*(1-exp((-xdata.*p(2))./(p(4)))) + xdata./p(3);
            
            %find the parameters
            options = optimoptions('lsqcurvefit','FunctionTolerance',1e-8,'MaxFunctionEvaluations',1e5);
            [params] = lsqcurvefit(fun,x0,xdata,ydata,lb,ub,options);
            
            % build regressed curve
            regComp = fun(params,xdata);
            
            %store the parameters
            if (mean(abs(regComp-ydata))<mse)
                 mse = mean(abs(regComp-ydata));
                 e0 = params(1);
                 e1 = params(2);
                 tau0 = params(3);
                 tau1 = params(4);
                 goodRegComp = regComp;
            end
            
            regComp_posint = goodRegComp >= 0;
            goodRegComp = goodRegComp(regComp_posint);
            timeRC = xdata(regComp_posint);
            
            % plot the result of the fit
            hold(app.UIAxes,'off')
            plot(app.UIAxes, app.unified_time,app.butter_filter, 'b');
            hold(app.UIAxes,'on');
            plot(app.UIAxes, timeRC,goodRegComp,'r');
            
            %print parameters
            app.E0.Value = {num2str(e0)};
            app.E1.Value = {num2str(e1)};
            app.Tau0.Value = {num2str(tau0)};
            app.Tau1.Value = {num2str(tau1)};
            app.Error.Value = {num2str(mse)};
            
            %output parameteres in workspace
            assignin('base','E0',e0);
            assignin('base','E1',e1);
            assignin('base','Tau0',tau0);
            assignin('base','Tau1',tau1);
            assignin('base','error',mse);
        end

        % Button pushed function: FindPointsButton
        function FindPointsButtonPushed(app, event)
            % *this dosen't currently work :(*
            %get time and compliance matrices
            time_matrix = app.time;
            compliance_matrix = app.compliance;
            
            %use similar code to interpolate function to find the jump
            %points of the raw data (with much smaller differce)
            size_comp = size(compliance_matrix);
            jump = zeros(2,2);
            difference = 100;
            %find jump points
            for i=2:size_comp(1,2)
                if compliance_matrix(i)-compliance_matrix(i-1) > difference
                    jump(1,1) = compliance_matrix(i-1);
                    jump(1,2) = compliance_matrix(i);
                    jump(2,1) = time_matrix(i-1);
                    jump(2,2) = time_matrix(i);
                    break
                end
            end
            
            %store, display, and plot the found points
            app.R1 = jump(2,1);
            hold(app.UIAxes, 'on');
            plot(app.UIAxes, jump(2,1), jump(1,1), "ok");
            app.rise1.Value = {num2str(jump(2,1)), num2str(jump(1,1))};
            
            app.R2 = jump(2,2);
            plot(app.UIAxes, jump(2,2), jump(1,2), "ok");
            app.rise2.Value = {num2str(jump(2,2)), num2str(jump(1,2))};
            
            %find fall points
            fall = zeros(2,2);
            for i=2:size_comp(1,2)
                if compliance_matrix(i-1)-compliance_matrix(i) > difference
                    fall(1,1) = compliance_matrix(i-1);
                    fall(1,2) = compliance_matrix(i);
                    fall(2,1) = time_matrix(i-1);
                    fall(2,2) = time_matrix(i);
                    break
                end
            end
            
            %store, display, and plot the found points
            app.F1 = fall(2,1);
            plot(app.UIAxes, fall(2,1), fall(1,1), "ok");
            app.fall1.Value = {num2str(fall(2,1)), num2str(fall(1,1))};
            
            app.F2 = fall(2,2);
            plot(app.UIAxes, fall(2,2), fall(1,2), "ok");
            app.fall2.Value = {num2str(fall(2,2)), num2str(fall(1,2))};
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [0.6353 0.8235 0.9098];
            app.UIFigure.Position = [100 100 798 538];
            app.UIFigure.Name = 'UI Figure';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, 'Graph')
            xlabel(app.UIAxes, 'Time')
            ylabel(app.UIAxes, 'Compliance')
            app.UIAxes.PlotBoxAspectRatio = [1.56591639871383 1 1];
            app.UIAxes.BackgroundColor = [0.0745 0.6235 1];
            app.UIAxes.Position = [13 195 437 304];

            % Create SelectDataButton
            app.SelectDataButton = uibutton(app.UIFigure, 'push');
            app.SelectDataButton.ButtonPushedFcn = createCallbackFcn(app, @SelectDataButtonPushed, true);
            app.SelectDataButton.Position = [41 507 100 22];
            app.SelectDataButton.Text = 'Select Data';

            % Create PlotButton
            app.PlotButton = uibutton(app.UIFigure, 'push');
            app.PlotButton.ButtonPushedFcn = createCallbackFcn(app, @PlotButtonPushed, true);
            app.PlotButton.Position = [350 507 100 22];
            app.PlotButton.Text = 'Plot';

            % Create SetRise1
            app.SetRise1 = uibutton(app.UIFigure, 'push');
            app.SetRise1.ButtonPushedFcn = createCallbackFcn(app, @SetRise1ButtonPushed, true);
            app.SetRise1.Position = [691 449 71 22];
            app.SetRise1.Text = 'Set Rise 1';

            % Create SetRise2
            app.SetRise2 = uibutton(app.UIFigure, 'push');
            app.SetRise2.ButtonPushedFcn = createCallbackFcn(app, @SetRise2ButtonPushed, true);
            app.SetRise2.Position = [690 406 71 22];
            app.SetRise2.Text = 'Set Rise 2';

            % Create SetFall1
            app.SetFall1 = uibutton(app.UIFigure, 'push');
            app.SetFall1.ButtonPushedFcn = createCallbackFcn(app, @SetFall1ButtonPushed, true);
            app.SetFall1.Position = [691 361 67 22];
            app.SetFall1.Text = 'Set Fall 1';

            % Create SetFall2
            app.SetFall2 = uibutton(app.UIFigure, 'push');
            app.SetFall2.ButtonPushedFcn = createCallbackFcn(app, @SetFall2ButtonPushed, true);
            app.SetFall2.Position = [691 316 67 22];
            app.SetFall2.Text = 'Set Fall 2';

            % Create Filter
            app.Filter = uibutton(app.UIFigure, 'push');
            app.Filter.ButtonPushedFcn = createCallbackFcn(app, @FilterButtonPushed, true);
            app.Filter.FontSize = 20;
            app.Filter.Position = [517 249 172 42];
            app.Filter.Text = 'Filter';

            % Create InterpolateandPlotButton
            app.InterpolateandPlotButton = uibutton(app.UIFigure, 'push');
            app.InterpolateandPlotButton.ButtonPushedFcn = createCallbackFcn(app, @InterpolateandPlotButtonPushed, true);
            app.InterpolateandPlotButton.Position = [543 211 120 28];
            app.InterpolateandPlotButton.Text = 'Interpolate and Plot';

            % Create FitButton
            app.FitButton = uibutton(app.UIFigure, 'push');
            app.FitButton.ButtonPushedFcn = createCallbackFcn(app, @FitButtonPushed, true);
            app.FitButton.Position = [478 118 139 38];
            app.FitButton.Text = 'Fit';

            % Create FindPointsButton
            app.FindPointsButton = uibutton(app.UIFigure, 'push');
            app.FindPointsButton.ButtonPushedFcn = createCallbackFcn(app, @FindPointsButtonPushed, true);
            app.FindPointsButton.Position = [572 486 100 22];
            app.FindPointsButton.Text = 'Find Points';

            % Create CellNameEditFieldLabel
            app.CellNameEditFieldLabel = uilabel(app.UIFigure);
            app.CellNameEditFieldLabel.HorizontalAlignment = 'right';
            app.CellNameEditFieldLabel.Position = [156 507 62 22];
            app.CellNameEditFieldLabel.Text = 'Cell Name';

            % Create CellNum
            app.CellNum = uieditfield(app.UIFigure, 'text');
            app.CellNum.Position = [231 507 100 22];

            % Create PointsSliderLabel
            app.PointsSliderLabel = uilabel(app.UIFigure);
            app.PointsSliderLabel.HorizontalAlignment = 'right';
            app.PointsSliderLabel.Position = [3 164 39 22];
            app.PointsSliderLabel.Text = 'Points';

            % Create PointsSlider
            app.PointsSlider = uislider(app.UIFigure);
            app.PointsSlider.ValueChangedFcn = createCallbackFcn(app, @PointsSliderValueChanged, true);
            app.PointsSlider.ValueChangingFcn = createCallbackFcn(app, @PointsSliderValueChanging, true);
            app.PointsSlider.Position = [68 183 374 3];

            % Create Rise1Label
            app.Rise1Label = uilabel(app.UIFigure);
            app.Rise1Label.HorizontalAlignment = 'right';
            app.Rise1Label.Position = [478 454 39 22];
            app.Rise1Label.Text = 'Rise 1';

            % Create rise1
            app.rise1 = uitextarea(app.UIFigure);
            app.rise1.Position = [528 443 150 35];

            % Create Rise2Label
            app.Rise2Label = uilabel(app.UIFigure);
            app.Rise2Label.HorizontalAlignment = 'right';
            app.Rise2Label.Position = [478 413 39 22];
            app.Rise2Label.Text = 'Rise 2';

            % Create rise2
            app.rise2 = uitextarea(app.UIFigure);
            app.rise2.Position = [528 400 150 35];

            % Create Fall1Label
            app.Fall1Label = uilabel(app.UIFigure);
            app.Fall1Label.HorizontalAlignment = 'right';
            app.Fall1Label.Position = [478 368 35 22];
            app.Fall1Label.Text = 'Fall 1';

            % Create fall1
            app.fall1 = uitextarea(app.UIFigure);
            app.fall1.Position = [528 355 150 35];

            % Create Fall2Label
            app.Fall2Label = uilabel(app.UIFigure);
            app.Fall2Label.HorizontalAlignment = 'right';
            app.Fall2Label.Position = [478 323 35 22];
            app.Fall2Label.Text = 'Fall 2';

            % Create fall2
            app.fall2 = uitextarea(app.UIFigure);
            app.fall2.Position = [528 309 150 35];

            % Create E0TextAreaLabel
            app.E0TextAreaLabel = uilabel(app.UIFigure);
            app.E0TextAreaLabel.HorizontalAlignment = 'right';
            app.E0TextAreaLabel.Position = [630 132 25 22];
            app.E0TextAreaLabel.Text = 'E0';

            % Create E0
            app.E0 = uitextarea(app.UIFigure);
            app.E0.Position = [670 132 105 24];

            % Create E1TextAreaLabel
            app.E1TextAreaLabel = uilabel(app.UIFigure);
            app.E1TextAreaLabel.HorizontalAlignment = 'right';
            app.E1TextAreaLabel.Position = [630 103 25 22];
            app.E1TextAreaLabel.Text = 'E1';

            % Create E1
            app.E1 = uitextarea(app.UIFigure);
            app.E1.Position = [670 103 105 24];

            % Create Tau0TextAreaLabel
            app.Tau0TextAreaLabel = uilabel(app.UIFigure);
            app.Tau0TextAreaLabel.HorizontalAlignment = 'right';
            app.Tau0TextAreaLabel.Position = [624 75 31 22];
            app.Tau0TextAreaLabel.Text = 'Tau0';

            % Create Tau0
            app.Tau0 = uitextarea(app.UIFigure);
            app.Tau0.Position = [670 75 105 24];

            % Create Tau1TextArea_2Label
            app.Tau1TextArea_2Label = uilabel(app.UIFigure);
            app.Tau1TextArea_2Label.HorizontalAlignment = 'right';
            app.Tau1TextArea_2Label.Position = [624 47 31 22];
            app.Tau1TextArea_2Label.Text = 'Tau1';

            % Create Tau1
            app.Tau1 = uitextarea(app.UIFigure);
            app.Tau1.Position = [670 47 105 24];

            % Create ErrorTextAreaLabel
            app.ErrorTextAreaLabel = uilabel(app.UIFigure);
            app.ErrorTextAreaLabel.HorizontalAlignment = 'right';
            app.ErrorTextAreaLabel.Position = [623 18 32 22];
            app.ErrorTextAreaLabel.Text = 'Error';

            % Create Error
            app.Error = uitextarea(app.UIFigure);
            app.Error.Position = [670 18 105 24];

            % Create PercentageRecoveryTextAreaLabel
            app.PercentageRecoveryTextAreaLabel = uilabel(app.UIFigure);
            app.PercentageRecoveryTextAreaLabel.HorizontalAlignment = 'right';
            app.PercentageRecoveryTextAreaLabel.Position = [486 169 116 25];
            app.PercentageRecoveryTextAreaLabel.Text = 'Percentage Recovery';

            % Create PRB
            app.PRB = uitextarea(app.UIFigure);
            app.PRB.Position = [609 172 134 23];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = filterandfit2

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
